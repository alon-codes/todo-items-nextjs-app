import Head from 'next/head'
import { Container } from '@mui/system'
import { Button, Fab, Grid, Stack, TextField, Typography, colors } from '@mui/material'
import { useEffect, useRef } from 'react';
import { AddOutlined } from '@mui/icons-material';
import { activeTodoState, allTodosState, sortedTodosSelector, TodoItem } from '@/state/todos';
import { useRecoilCallback, useRecoilState, useRecoilValue, useResetRecoilState, useSetRecoilState } from 'recoil';
import axios from 'axios';
import { createTodo, updateTodo } from './api';
import TodoListItem from '@/components/TodoItem';
// Active todo item - TodoItem
export const mui_colors = Object.keys(colors);

export default function Home() {
  const items = useRecoilValue(sortedTodosSelector);
  const setItems = useSetRecoilState(allTodosState)
  const [activeTodo, setActiveTodo] = useRecoilState<TodoItem>(activeTodoState);
  const resetActiveTodo = useResetRecoilState(activeTodoState);

  const discard = () => {
    // Restores last synced state
    resetActiveTodo()
  }

  const save = async (incomingTodo: TodoItem) => {
    let nextItems: Array<TodoItem> = [...items];

    if (!incomingTodo.created_at) {
      const nextOrder = items.length;
      const createRes = await createTodo({
        ...incomingTodo,
        order: nextOrder,
        color: nextOrder % mui_colors.length
      });
      if (!!createRes) {
        nextItems = nextItems.concat({ ...createRes });
      }
    } else if (!!incomingTodo.id) {
      const updateRes = await updateTodo(incomingTodo.id, incomingTodo);
      const curItemIndex = items.findIndex(t => t.id === incomingTodo.id);
      if (!!updateRes) {
        nextItems[curItemIndex] = { ...updateRes };
      }
    }

    setItems(nextItems);
    resetActiveTodo();
  };

  const moveTodo = useRecoilCallback(() => async (dragIndex: number, hoverIndex: number) => {
    let in_items = [...items];
    const prev_item = { ...in_items[dragIndex] };
    const next_item = { ...in_items[hoverIndex] };

    console.log({ dragIndex, hoverIndex, in_items, prev_item, next_item });

    in_items[dragIndex] = { ...next_item, order: prev_item.order };
    in_items[hoverIndex] = { ...prev_item, order: next_item.order };

    console.log({ in_items });

    if (!!next_item.id && !!prev_item.id) {
      await updateTodo(next_item.id, in_items[dragIndex]);
      await updateTodo(prev_item.id, in_items[hoverIndex]);
    }

    setItems(in_items);
  });

  useEffect(() => {
    axios.get('/api/todos/').then(res => setItems(res.data))
  }, [setItems])

  const inputRef = useRef<HTMLInputElement>(null);

  return (
    <>
      <Head>
        <title>TODO List</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <Typography px={2} variant="h4">Todo list</Typography>
        <Grid sx={{ backgroundColor: "#fff", width: "100%", zIndex: 9999, position: 'sticky', top: 0, left: 0 }} paddingY={4} justifyContent="space-between" container>
          <Grid padding={2} container>
            <Typography onClick={e => inputRef.current && inputRef.current.focus()} variant="subtitle2">Write down you task</Typography>
            <TextField
              inputProps={{
                ref: inputRef
              }}
              margin="normal"
              id="content"
              value={activeTodo.text || ''}
              onKeyUp={async e => !e.shiftKey && e.key === "Enter" && await save({ ...activeTodo })}
              onChange={e => setActiveTodo({ ...activeTodo, text: e.currentTarget.value })}
              minRows={1}
              maxRows={3}
              multiline
              variant="outlined"
              fullWidth />
            <Stack justifyContent="space-around" alignContent="space-evenly" direction="row">
              <Button onClick={async e => await save({ ...activeTodo })} disabled={!activeTodo.text.length} variant="text">Save</Button>
              <Button onClick={discard} disabled={!activeTodo?.text || activeTodo?.synced_text === activeTodo?.text} variant="text">Discard changes</Button>
            </Stack>
          </Grid>
        </Grid>
        <Grid columnSpacing={2} container sx={{ overflow: 'scroll' }} justifyItems="center">
          {items.map((cur_todo_item: TodoItem, i: number) => <TodoListItem moveTodo={moveTodo} key={i} item={cur_todo_item} index={i} />)}
          {items.length === 0 && (
            <Stack width={'100%'} justifyItems="center" alignContent="center" justifyContent="center" alignItems="center" direction="column">
              <Typography textAlign="center" paddingX={4} variant="h5">
                Your list is empty, give it a try add task!
              </Typography>
              <Button fullWidth={false} startIcon={<AddOutlined />} onClick={e => inputRef.current && inputRef.current.focus()}>Create</Button>
            </Stack>
          )}
        </Grid>
        <Fab sx={{ position: "fixed", bottom: 15, left: 15 }} onClick={e => {
          resetActiveTodo()
          inputRef.current && inputRef.current.focus()
        }} variant="extended">
          <AddOutlined sx={{ mr: 1 }} />
          Create
        </Fab>
      </Container>
    </>
  )
}
